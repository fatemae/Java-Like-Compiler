Terminals unused in grammar

    COLON
    ARRAY
    THEN
    DO


Grammar

    0 $accept: program $end

    1 program: classes

    2 classes: %empty
    3        | class classes

    4 class: CLASS ID LBRACE vardeclist funclist RBRACE

    5 vardeclist: %empty
    6           | vardec vardeclist

    7 vardec: lvalue ASSIGN exp SEMICOLON
    8       | ty ID SEMICOLON
    9       | ty ID ASSIGN exp SEMICOLON
   10       | ty LBRACK INT RBRACK ID ASSIGN exp SEMICOLON
   11       | ID ID SEMICOLON
   12       | ID ID ASSIGN NEW ID LPAREN args RPAREN SEMICOLON
   13       | lvalue ASSIGN NEW ID LPAREN args RPAREN SEMICOLON

   14 funclist: %empty
   15         | func funclist

   16 func: FUN ID LPAREN tyargs RPAREN LBRACE stmts RBRACE
   17     | FUN ID RETURNS ty LPAREN tyargs RPAREN LBRACE stmts retstmt RBRACE

   18 stmts: %empty
   19      | stmt stmts

   20 stmt: vardec
   21     | IF LPAREN exp RPAREN stmt ELSE stmt
   22     | WHILE LPAREN exp RPAREN stmt
   23     | FOR LPAREN ID ASSIGN exp SEMICOLON exp SEMICOLON stmt RPAREN stmt
   24     | LBRACE stmts RBRACE
   25     | func
   26     | ID LPAREN args RPAREN SEMICOLON

   27 retstmt: RETURN exp SEMICOLON

   28 exp: lvalue
   29    | INT
   30    | STRING
   31    | exp PLUS exp
   32    | exp MINUS exp
   33    | exp TIMES exp
   34    | exp DIVIDE exp
   35    | exp EQ exp
   36    | exp NEQ exp
   37    | exp LT exp
   38    | exp GT exp
   39    | exp LE exp
   40    | exp GE exp
   41    | exp AND exp
   42    | exp OR exp
   43    | ID LPAREN args RPAREN
   44    | ID DOT ID
   45    | ID DOT ID LPAREN args RPAREN

   46 ty: INTTY
   47   | STRINGTY
   48   | ty LBRACK RBRACK

   49 lvalue: ID
   50       | lvalue LBRACK exp RBRACK

   51 args: %empty
   52     | exp
   53     | exp COMMA args

   54 tyargs: %empty
   55       | ty ID
   56       | ty ID COMMA tyargs


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    ID <sval> (258) 4 8 9 10 11 12 13 16 17 23 26 43 44 45 49 55 56
    STRING <sval> (259) 30
    INT <ival> (260) 10 29
    COMMA (261) 53 56
    DOT (262) 44 45
    COLON (263)
    SEMICOLON (264) 7 8 9 10 11 12 13 23 26 27
    LPAREN (265) 12 13 16 17 21 22 23 26 43 45
    RPAREN (266) 12 13 16 17 21 22 23 26 43 45
    LBRACK (267) 10 48 50
    RBRACK (268) 10 48 50
    LBRACE (269) 4 16 17 24
    RBRACE (270) 4 16 17 24
    PLUS (271) 31
    MINUS (272) 32
    TIMES (273) 33
    DIVIDE (274) 34
    EQ (275) 35
    NEQ (276) 36
    LT (277) 37
    LE (278) 39
    GT (279) 38
    GE (280) 40
    AND (281) 41
    OR (282) 42
    ASSIGN (283) 7 9 10 12 13 23
    ARRAY (284)
    IF (285) 21
    THEN (286)
    ELSE (287) 21
    WHILE (288) 22
    FOR (289) 23
    DO (290)
    INTTY (291) 46
    STRINGTY (292) 47
    FUN (293) 16 17
    RETURNS (294) 17
    RETURN (295) 27
    CLASS (296) 4
    NEW (297) 12 13


Nonterminals, with rules where they appear

    $accept (43)
        on left: 0
    program (44)
        on left: 1
        on right: 0
    classes <classes> (45)
        on left: 2 3
        on right: 1 3
    class <class> (46)
        on left: 4
        on right: 3
    vardeclist <vardeclist> (47)
        on left: 5 6
        on right: 4 6
    vardec <vardec> (48)
        on left: 7 8 9 10 11 12 13
        on right: 6 20
    funclist <funclist> (49)
        on left: 14 15
        on right: 4 15
    func <func> (50)
        on left: 16 17
        on right: 15 25
    stmts <stmts> (51)
        on left: 18 19
        on right: 16 17 19 24
    stmt <stmt> (52)
        on left: 20 21 22 23 24 25 26
        on right: 19 21 22 23
    retstmt <retstmt> (53)
        on left: 27
        on right: 17
    exp <exp> (54)
        on left: 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45
        on right: 7 9 10 21 22 23 27 31 32 33 34 35 36 37 38 39 40 41 42 50 52 53
    ty <ty> (55)
        on left: 46 47 48
        on right: 8 9 10 17 48 55 56
    lvalue <lval> (56)
        on left: 49 50
        on right: 7 13 28 50
    args <exps> (57)
        on left: 51 52 53
        on right: 12 13 26 43 45 53
    tyargs <params> (58)
        on left: 54 55 56
        on right: 16 17 56


State 0

    0 $accept: • program $end

    CLASS  shift, and go to state 1

    $default  reduce using rule 2 (classes)

    program  go to state 2
    classes  go to state 3
    class    go to state 4


State 1

    4 class: CLASS • ID LBRACE vardeclist funclist RBRACE

    ID  shift, and go to state 5


State 2

    0 $accept: program • $end

    $end  shift, and go to state 6


State 3

    1 program: classes •

    $default  reduce using rule 1 (program)


State 4

    3 classes: class • classes

    CLASS  shift, and go to state 1

    $default  reduce using rule 2 (classes)

    classes  go to state 7
    class    go to state 4


State 5

    4 class: CLASS ID • LBRACE vardeclist funclist RBRACE

    LBRACE  shift, and go to state 8


State 6

    0 $accept: program $end •

    $default  accept


State 7

    3 classes: class classes •

    $default  reduce using rule 3 (classes)


State 8

    4 class: CLASS ID LBRACE • vardeclist funclist RBRACE

    ID        shift, and go to state 9
    INTTY     shift, and go to state 10
    STRINGTY  shift, and go to state 11

    $default  reduce using rule 5 (vardeclist)

    vardeclist  go to state 12
    vardec      go to state 13
    ty          go to state 14
    lvalue      go to state 15


State 9

   11 vardec: ID • ID SEMICOLON
   12       | ID • ID ASSIGN NEW ID LPAREN args RPAREN SEMICOLON
   49 lvalue: ID •

    ID  shift, and go to state 16

    $default  reduce using rule 49 (lvalue)


State 10

   46 ty: INTTY •

    $default  reduce using rule 46 (ty)


State 11

   47 ty: STRINGTY •

    $default  reduce using rule 47 (ty)


State 12

    4 class: CLASS ID LBRACE vardeclist • funclist RBRACE

    FUN  shift, and go to state 17

    $default  reduce using rule 14 (funclist)

    funclist  go to state 18
    func      go to state 19


State 13

    6 vardeclist: vardec • vardeclist

    ID        shift, and go to state 9
    INTTY     shift, and go to state 10
    STRINGTY  shift, and go to state 11

    $default  reduce using rule 5 (vardeclist)

    vardeclist  go to state 20
    vardec      go to state 13
    ty          go to state 14
    lvalue      go to state 15


State 14

    8 vardec: ty • ID SEMICOLON
    9       | ty • ID ASSIGN exp SEMICOLON
   10       | ty • LBRACK INT RBRACK ID ASSIGN exp SEMICOLON
   48 ty: ty • LBRACK RBRACK

    ID      shift, and go to state 21
    LBRACK  shift, and go to state 22


State 15

    7 vardec: lvalue • ASSIGN exp SEMICOLON
   13       | lvalue • ASSIGN NEW ID LPAREN args RPAREN SEMICOLON
   50 lvalue: lvalue • LBRACK exp RBRACK

    LBRACK  shift, and go to state 23
    ASSIGN  shift, and go to state 24


State 16

   11 vardec: ID ID • SEMICOLON
   12       | ID ID • ASSIGN NEW ID LPAREN args RPAREN SEMICOLON

    SEMICOLON  shift, and go to state 25
    ASSIGN     shift, and go to state 26


State 17

   16 func: FUN • ID LPAREN tyargs RPAREN LBRACE stmts RBRACE
   17     | FUN • ID RETURNS ty LPAREN tyargs RPAREN LBRACE stmts retstmt RBRACE

    ID  shift, and go to state 27


State 18

    4 class: CLASS ID LBRACE vardeclist funclist • RBRACE

    RBRACE  shift, and go to state 28


State 19

   15 funclist: func • funclist

    FUN  shift, and go to state 17

    $default  reduce using rule 14 (funclist)

    funclist  go to state 29
    func      go to state 19


State 20

    6 vardeclist: vardec vardeclist •

    $default  reduce using rule 6 (vardeclist)


State 21

    8 vardec: ty ID • SEMICOLON
    9       | ty ID • ASSIGN exp SEMICOLON

    SEMICOLON  shift, and go to state 30
    ASSIGN     shift, and go to state 31


State 22

   10 vardec: ty LBRACK • INT RBRACK ID ASSIGN exp SEMICOLON
   48 ty: ty LBRACK • RBRACK

    INT     shift, and go to state 32
    RBRACK  shift, and go to state 33


State 23

   50 lvalue: lvalue LBRACK • exp RBRACK

    ID      shift, and go to state 34
    STRING  shift, and go to state 35
    INT     shift, and go to state 36

    exp     go to state 37
    lvalue  go to state 38


State 24

    7 vardec: lvalue ASSIGN • exp SEMICOLON
   13       | lvalue ASSIGN • NEW ID LPAREN args RPAREN SEMICOLON

    ID      shift, and go to state 34
    STRING  shift, and go to state 35
    INT     shift, and go to state 36
    NEW     shift, and go to state 39

    exp     go to state 40
    lvalue  go to state 38


State 25

   11 vardec: ID ID SEMICOLON •

    $default  reduce using rule 11 (vardec)


State 26

   12 vardec: ID ID ASSIGN • NEW ID LPAREN args RPAREN SEMICOLON

    NEW  shift, and go to state 41


State 27

   16 func: FUN ID • LPAREN tyargs RPAREN LBRACE stmts RBRACE
   17     | FUN ID • RETURNS ty LPAREN tyargs RPAREN LBRACE stmts retstmt RBRACE

    LPAREN   shift, and go to state 42
    RETURNS  shift, and go to state 43


State 28

    4 class: CLASS ID LBRACE vardeclist funclist RBRACE •

    $default  reduce using rule 4 (class)


State 29

   15 funclist: func funclist •

    $default  reduce using rule 15 (funclist)


State 30

    8 vardec: ty ID SEMICOLON •

    $default  reduce using rule 8 (vardec)


State 31

    9 vardec: ty ID ASSIGN • exp SEMICOLON

    ID      shift, and go to state 34
    STRING  shift, and go to state 35
    INT     shift, and go to state 36

    exp     go to state 44
    lvalue  go to state 38


State 32

   10 vardec: ty LBRACK INT • RBRACK ID ASSIGN exp SEMICOLON

    RBRACK  shift, and go to state 45


State 33

   48 ty: ty LBRACK RBRACK •

    $default  reduce using rule 48 (ty)


State 34

   43 exp: ID • LPAREN args RPAREN
   44    | ID • DOT ID
   45    | ID • DOT ID LPAREN args RPAREN
   49 lvalue: ID •

    DOT     shift, and go to state 46
    LPAREN  shift, and go to state 47

    $default  reduce using rule 49 (lvalue)


State 35

   30 exp: STRING •

    $default  reduce using rule 30 (exp)


State 36

   29 exp: INT •

    $default  reduce using rule 29 (exp)


State 37

   31 exp: exp • PLUS exp
   32    | exp • MINUS exp
   33    | exp • TIMES exp
   34    | exp • DIVIDE exp
   35    | exp • EQ exp
   36    | exp • NEQ exp
   37    | exp • LT exp
   38    | exp • GT exp
   39    | exp • LE exp
   40    | exp • GE exp
   41    | exp • AND exp
   42    | exp • OR exp
   50 lvalue: lvalue LBRACK exp • RBRACK

    RBRACK  shift, and go to state 48
    PLUS    shift, and go to state 49
    MINUS   shift, and go to state 50
    TIMES   shift, and go to state 51
    DIVIDE  shift, and go to state 52
    EQ      shift, and go to state 53
    NEQ     shift, and go to state 54
    LT      shift, and go to state 55
    LE      shift, and go to state 56
    GT      shift, and go to state 57
    GE      shift, and go to state 58
    AND     shift, and go to state 59
    OR      shift, and go to state 60


State 38

   28 exp: lvalue •
   50 lvalue: lvalue • LBRACK exp RBRACK

    LBRACK  shift, and go to state 23

    $default  reduce using rule 28 (exp)


State 39

   13 vardec: lvalue ASSIGN NEW • ID LPAREN args RPAREN SEMICOLON

    ID  shift, and go to state 61


State 40

    7 vardec: lvalue ASSIGN exp • SEMICOLON
   31 exp: exp • PLUS exp
   32    | exp • MINUS exp
   33    | exp • TIMES exp
   34    | exp • DIVIDE exp
   35    | exp • EQ exp
   36    | exp • NEQ exp
   37    | exp • LT exp
   38    | exp • GT exp
   39    | exp • LE exp
   40    | exp • GE exp
   41    | exp • AND exp
   42    | exp • OR exp

    SEMICOLON  shift, and go to state 62
    PLUS       shift, and go to state 49
    MINUS      shift, and go to state 50
    TIMES      shift, and go to state 51
    DIVIDE     shift, and go to state 52
    EQ         shift, and go to state 53
    NEQ        shift, and go to state 54
    LT         shift, and go to state 55
    LE         shift, and go to state 56
    GT         shift, and go to state 57
    GE         shift, and go to state 58
    AND        shift, and go to state 59
    OR         shift, and go to state 60


State 41

   12 vardec: ID ID ASSIGN NEW • ID LPAREN args RPAREN SEMICOLON

    ID  shift, and go to state 63


State 42

   16 func: FUN ID LPAREN • tyargs RPAREN LBRACE stmts RBRACE

    INTTY     shift, and go to state 10
    STRINGTY  shift, and go to state 11

    $default  reduce using rule 54 (tyargs)

    ty      go to state 64
    tyargs  go to state 65


State 43

   17 func: FUN ID RETURNS • ty LPAREN tyargs RPAREN LBRACE stmts retstmt RBRACE

    INTTY     shift, and go to state 10
    STRINGTY  shift, and go to state 11

    ty  go to state 66


State 44

    9 vardec: ty ID ASSIGN exp • SEMICOLON
   31 exp: exp • PLUS exp
   32    | exp • MINUS exp
   33    | exp • TIMES exp
   34    | exp • DIVIDE exp
   35    | exp • EQ exp
   36    | exp • NEQ exp
   37    | exp • LT exp
   38    | exp • GT exp
   39    | exp • LE exp
   40    | exp • GE exp
   41    | exp • AND exp
   42    | exp • OR exp

    SEMICOLON  shift, and go to state 67
    PLUS       shift, and go to state 49
    MINUS      shift, and go to state 50
    TIMES      shift, and go to state 51
    DIVIDE     shift, and go to state 52
    EQ         shift, and go to state 53
    NEQ        shift, and go to state 54
    LT         shift, and go to state 55
    LE         shift, and go to state 56
    GT         shift, and go to state 57
    GE         shift, and go to state 58
    AND        shift, and go to state 59
    OR         shift, and go to state 60


State 45

   10 vardec: ty LBRACK INT RBRACK • ID ASSIGN exp SEMICOLON

    ID  shift, and go to state 68


State 46

   44 exp: ID DOT • ID
   45    | ID DOT • ID LPAREN args RPAREN

    ID  shift, and go to state 69


State 47

   43 exp: ID LPAREN • args RPAREN

    ID      shift, and go to state 34
    STRING  shift, and go to state 35
    INT     shift, and go to state 36

    $default  reduce using rule 51 (args)

    exp     go to state 70
    lvalue  go to state 38
    args    go to state 71


State 48

   50 lvalue: lvalue LBRACK exp RBRACK •

    $default  reduce using rule 50 (lvalue)


State 49

   31 exp: exp PLUS • exp

    ID      shift, and go to state 34
    STRING  shift, and go to state 35
    INT     shift, and go to state 36

    exp     go to state 72
    lvalue  go to state 38


State 50

   32 exp: exp MINUS • exp

    ID      shift, and go to state 34
    STRING  shift, and go to state 35
    INT     shift, and go to state 36

    exp     go to state 73
    lvalue  go to state 38


State 51

   33 exp: exp TIMES • exp

    ID      shift, and go to state 34
    STRING  shift, and go to state 35
    INT     shift, and go to state 36

    exp     go to state 74
    lvalue  go to state 38


State 52

   34 exp: exp DIVIDE • exp

    ID      shift, and go to state 34
    STRING  shift, and go to state 35
    INT     shift, and go to state 36

    exp     go to state 75
    lvalue  go to state 38


State 53

   35 exp: exp EQ • exp

    ID      shift, and go to state 34
    STRING  shift, and go to state 35
    INT     shift, and go to state 36

    exp     go to state 76
    lvalue  go to state 38


State 54

   36 exp: exp NEQ • exp

    ID      shift, and go to state 34
    STRING  shift, and go to state 35
    INT     shift, and go to state 36

    exp     go to state 77
    lvalue  go to state 38


State 55

   37 exp: exp LT • exp

    ID      shift, and go to state 34
    STRING  shift, and go to state 35
    INT     shift, and go to state 36

    exp     go to state 78
    lvalue  go to state 38


State 56

   39 exp: exp LE • exp

    ID      shift, and go to state 34
    STRING  shift, and go to state 35
    INT     shift, and go to state 36

    exp     go to state 79
    lvalue  go to state 38


State 57

   38 exp: exp GT • exp

    ID      shift, and go to state 34
    STRING  shift, and go to state 35
    INT     shift, and go to state 36

    exp     go to state 80
    lvalue  go to state 38


State 58

   40 exp: exp GE • exp

    ID      shift, and go to state 34
    STRING  shift, and go to state 35
    INT     shift, and go to state 36

    exp     go to state 81
    lvalue  go to state 38


State 59

   41 exp: exp AND • exp

    ID      shift, and go to state 34
    STRING  shift, and go to state 35
    INT     shift, and go to state 36

    exp     go to state 82
    lvalue  go to state 38


State 60

   42 exp: exp OR • exp

    ID      shift, and go to state 34
    STRING  shift, and go to state 35
    INT     shift, and go to state 36

    exp     go to state 83
    lvalue  go to state 38


State 61

   13 vardec: lvalue ASSIGN NEW ID • LPAREN args RPAREN SEMICOLON

    LPAREN  shift, and go to state 84


State 62

    7 vardec: lvalue ASSIGN exp SEMICOLON •

    $default  reduce using rule 7 (vardec)


State 63

   12 vardec: ID ID ASSIGN NEW ID • LPAREN args RPAREN SEMICOLON

    LPAREN  shift, and go to state 85


State 64

   48 ty: ty • LBRACK RBRACK
   55 tyargs: ty • ID
   56       | ty • ID COMMA tyargs

    ID      shift, and go to state 86
    LBRACK  shift, and go to state 87


State 65

   16 func: FUN ID LPAREN tyargs • RPAREN LBRACE stmts RBRACE

    RPAREN  shift, and go to state 88


State 66

   17 func: FUN ID RETURNS ty • LPAREN tyargs RPAREN LBRACE stmts retstmt RBRACE
   48 ty: ty • LBRACK RBRACK

    LPAREN  shift, and go to state 89
    LBRACK  shift, and go to state 87


State 67

    9 vardec: ty ID ASSIGN exp SEMICOLON •

    $default  reduce using rule 9 (vardec)


State 68

   10 vardec: ty LBRACK INT RBRACK ID • ASSIGN exp SEMICOLON

    ASSIGN  shift, and go to state 90


State 69

   44 exp: ID DOT ID •
   45    | ID DOT ID • LPAREN args RPAREN

    LPAREN  shift, and go to state 91

    $default  reduce using rule 44 (exp)


State 70

   31 exp: exp • PLUS exp
   32    | exp • MINUS exp
   33    | exp • TIMES exp
   34    | exp • DIVIDE exp
   35    | exp • EQ exp
   36    | exp • NEQ exp
   37    | exp • LT exp
   38    | exp • GT exp
   39    | exp • LE exp
   40    | exp • GE exp
   41    | exp • AND exp
   42    | exp • OR exp
   52 args: exp •
   53     | exp • COMMA args

    COMMA   shift, and go to state 92
    PLUS    shift, and go to state 49
    MINUS   shift, and go to state 50
    TIMES   shift, and go to state 51
    DIVIDE  shift, and go to state 52
    EQ      shift, and go to state 53
    NEQ     shift, and go to state 54
    LT      shift, and go to state 55
    LE      shift, and go to state 56
    GT      shift, and go to state 57
    GE      shift, and go to state 58
    AND     shift, and go to state 59
    OR      shift, and go to state 60

    $default  reduce using rule 52 (args)


State 71

   43 exp: ID LPAREN args • RPAREN

    RPAREN  shift, and go to state 93


State 72

   31 exp: exp • PLUS exp
   31    | exp PLUS exp •
   32    | exp • MINUS exp
   33    | exp • TIMES exp
   34    | exp • DIVIDE exp
   35    | exp • EQ exp
   36    | exp • NEQ exp
   37    | exp • LT exp
   38    | exp • GT exp
   39    | exp • LE exp
   40    | exp • GE exp
   41    | exp • AND exp
   42    | exp • OR exp

    TIMES   shift, and go to state 51
    DIVIDE  shift, and go to state 52

    $default  reduce using rule 31 (exp)


State 73

   31 exp: exp • PLUS exp
   32    | exp • MINUS exp
   32    | exp MINUS exp •
   33    | exp • TIMES exp
   34    | exp • DIVIDE exp
   35    | exp • EQ exp
   36    | exp • NEQ exp
   37    | exp • LT exp
   38    | exp • GT exp
   39    | exp • LE exp
   40    | exp • GE exp
   41    | exp • AND exp
   42    | exp • OR exp

    TIMES   shift, and go to state 51
    DIVIDE  shift, and go to state 52

    $default  reduce using rule 32 (exp)


State 74

   31 exp: exp • PLUS exp
   32    | exp • MINUS exp
   33    | exp • TIMES exp
   33    | exp TIMES exp •
   34    | exp • DIVIDE exp
   35    | exp • EQ exp
   36    | exp • NEQ exp
   37    | exp • LT exp
   38    | exp • GT exp
   39    | exp • LE exp
   40    | exp • GE exp
   41    | exp • AND exp
   42    | exp • OR exp

    $default  reduce using rule 33 (exp)


State 75

   31 exp: exp • PLUS exp
   32    | exp • MINUS exp
   33    | exp • TIMES exp
   34    | exp • DIVIDE exp
   34    | exp DIVIDE exp •
   35    | exp • EQ exp
   36    | exp • NEQ exp
   37    | exp • LT exp
   38    | exp • GT exp
   39    | exp • LE exp
   40    | exp • GE exp
   41    | exp • AND exp
   42    | exp • OR exp

    $default  reduce using rule 34 (exp)


State 76

   31 exp: exp • PLUS exp
   32    | exp • MINUS exp
   33    | exp • TIMES exp
   34    | exp • DIVIDE exp
   35    | exp • EQ exp
   35    | exp EQ exp •
   36    | exp • NEQ exp
   37    | exp • LT exp
   38    | exp • GT exp
   39    | exp • LE exp
   40    | exp • GE exp
   41    | exp • AND exp
   42    | exp • OR exp

    PLUS    shift, and go to state 49
    MINUS   shift, and go to state 50
    TIMES   shift, and go to state 51
    DIVIDE  shift, and go to state 52

    EQ   error (nonassociative)
    NEQ  error (nonassociative)
    LT   error (nonassociative)
    LE   error (nonassociative)
    GT   error (nonassociative)
    GE   error (nonassociative)

    $default  reduce using rule 35 (exp)


State 77

   31 exp: exp • PLUS exp
   32    | exp • MINUS exp
   33    | exp • TIMES exp
   34    | exp • DIVIDE exp
   35    | exp • EQ exp
   36    | exp • NEQ exp
   36    | exp NEQ exp •
   37    | exp • LT exp
   38    | exp • GT exp
   39    | exp • LE exp
   40    | exp • GE exp
   41    | exp • AND exp
   42    | exp • OR exp

    PLUS    shift, and go to state 49
    MINUS   shift, and go to state 50
    TIMES   shift, and go to state 51
    DIVIDE  shift, and go to state 52

    EQ   error (nonassociative)
    NEQ  error (nonassociative)
    LT   error (nonassociative)
    LE   error (nonassociative)
    GT   error (nonassociative)
    GE   error (nonassociative)

    $default  reduce using rule 36 (exp)


State 78

   31 exp: exp • PLUS exp
   32    | exp • MINUS exp
   33    | exp • TIMES exp
   34    | exp • DIVIDE exp
   35    | exp • EQ exp
   36    | exp • NEQ exp
   37    | exp • LT exp
   37    | exp LT exp •
   38    | exp • GT exp
   39    | exp • LE exp
   40    | exp • GE exp
   41    | exp • AND exp
   42    | exp • OR exp

    PLUS    shift, and go to state 49
    MINUS   shift, and go to state 50
    TIMES   shift, and go to state 51
    DIVIDE  shift, and go to state 52

    EQ   error (nonassociative)
    NEQ  error (nonassociative)
    LT   error (nonassociative)
    LE   error (nonassociative)
    GT   error (nonassociative)
    GE   error (nonassociative)

    $default  reduce using rule 37 (exp)


State 79

   31 exp: exp • PLUS exp
   32    | exp • MINUS exp
   33    | exp • TIMES exp
   34    | exp • DIVIDE exp
   35    | exp • EQ exp
   36    | exp • NEQ exp
   37    | exp • LT exp
   38    | exp • GT exp
   39    | exp • LE exp
   39    | exp LE exp •
   40    | exp • GE exp
   41    | exp • AND exp
   42    | exp • OR exp

    PLUS    shift, and go to state 49
    MINUS   shift, and go to state 50
    TIMES   shift, and go to state 51
    DIVIDE  shift, and go to state 52

    EQ   error (nonassociative)
    NEQ  error (nonassociative)
    LT   error (nonassociative)
    LE   error (nonassociative)
    GT   error (nonassociative)
    GE   error (nonassociative)

    $default  reduce using rule 39 (exp)


State 80

   31 exp: exp • PLUS exp
   32    | exp • MINUS exp
   33    | exp • TIMES exp
   34    | exp • DIVIDE exp
   35    | exp • EQ exp
   36    | exp • NEQ exp
   37    | exp • LT exp
   38    | exp • GT exp
   38    | exp GT exp •
   39    | exp • LE exp
   40    | exp • GE exp
   41    | exp • AND exp
   42    | exp • OR exp

    PLUS    shift, and go to state 49
    MINUS   shift, and go to state 50
    TIMES   shift, and go to state 51
    DIVIDE  shift, and go to state 52

    EQ   error (nonassociative)
    NEQ  error (nonassociative)
    LT   error (nonassociative)
    LE   error (nonassociative)
    GT   error (nonassociative)
    GE   error (nonassociative)

    $default  reduce using rule 38 (exp)


State 81

   31 exp: exp • PLUS exp
   32    | exp • MINUS exp
   33    | exp • TIMES exp
   34    | exp • DIVIDE exp
   35    | exp • EQ exp
   36    | exp • NEQ exp
   37    | exp • LT exp
   38    | exp • GT exp
   39    | exp • LE exp
   40    | exp • GE exp
   40    | exp GE exp •
   41    | exp • AND exp
   42    | exp • OR exp

    PLUS    shift, and go to state 49
    MINUS   shift, and go to state 50
    TIMES   shift, and go to state 51
    DIVIDE  shift, and go to state 52

    EQ   error (nonassociative)
    NEQ  error (nonassociative)
    LT   error (nonassociative)
    LE   error (nonassociative)
    GT   error (nonassociative)
    GE   error (nonassociative)

    $default  reduce using rule 40 (exp)


State 82

   31 exp: exp • PLUS exp
   32    | exp • MINUS exp
   33    | exp • TIMES exp
   34    | exp • DIVIDE exp
   35    | exp • EQ exp
   36    | exp • NEQ exp
   37    | exp • LT exp
   38    | exp • GT exp
   39    | exp • LE exp
   40    | exp • GE exp
   41    | exp • AND exp
   41    | exp AND exp •
   42    | exp • OR exp

    PLUS    shift, and go to state 49
    MINUS   shift, and go to state 50
    TIMES   shift, and go to state 51
    DIVIDE  shift, and go to state 52
    EQ      shift, and go to state 53
    NEQ     shift, and go to state 54
    LT      shift, and go to state 55
    LE      shift, and go to state 56
    GT      shift, and go to state 57
    GE      shift, and go to state 58

    $default  reduce using rule 41 (exp)


State 83

   31 exp: exp • PLUS exp
   32    | exp • MINUS exp
   33    | exp • TIMES exp
   34    | exp • DIVIDE exp
   35    | exp • EQ exp
   36    | exp • NEQ exp
   37    | exp • LT exp
   38    | exp • GT exp
   39    | exp • LE exp
   40    | exp • GE exp
   41    | exp • AND exp
   42    | exp • OR exp
   42    | exp OR exp •

    PLUS    shift, and go to state 49
    MINUS   shift, and go to state 50
    TIMES   shift, and go to state 51
    DIVIDE  shift, and go to state 52
    EQ      shift, and go to state 53
    NEQ     shift, and go to state 54
    LT      shift, and go to state 55
    LE      shift, and go to state 56
    GT      shift, and go to state 57
    GE      shift, and go to state 58
    AND     shift, and go to state 59

    $default  reduce using rule 42 (exp)


State 84

   13 vardec: lvalue ASSIGN NEW ID LPAREN • args RPAREN SEMICOLON

    ID      shift, and go to state 34
    STRING  shift, and go to state 35
    INT     shift, and go to state 36

    $default  reduce using rule 51 (args)

    exp     go to state 70
    lvalue  go to state 38
    args    go to state 94


State 85

   12 vardec: ID ID ASSIGN NEW ID LPAREN • args RPAREN SEMICOLON

    ID      shift, and go to state 34
    STRING  shift, and go to state 35
    INT     shift, and go to state 36

    $default  reduce using rule 51 (args)

    exp     go to state 70
    lvalue  go to state 38
    args    go to state 95


State 86

   55 tyargs: ty ID •
   56       | ty ID • COMMA tyargs

    COMMA  shift, and go to state 96

    $default  reduce using rule 55 (tyargs)


State 87

   48 ty: ty LBRACK • RBRACK

    RBRACK  shift, and go to state 33


State 88

   16 func: FUN ID LPAREN tyargs RPAREN • LBRACE stmts RBRACE

    LBRACE  shift, and go to state 97


State 89

   17 func: FUN ID RETURNS ty LPAREN • tyargs RPAREN LBRACE stmts retstmt RBRACE

    INTTY     shift, and go to state 10
    STRINGTY  shift, and go to state 11

    $default  reduce using rule 54 (tyargs)

    ty      go to state 64
    tyargs  go to state 98


State 90

   10 vardec: ty LBRACK INT RBRACK ID ASSIGN • exp SEMICOLON

    ID      shift, and go to state 34
    STRING  shift, and go to state 35
    INT     shift, and go to state 36

    exp     go to state 99
    lvalue  go to state 38


State 91

   45 exp: ID DOT ID LPAREN • args RPAREN

    ID      shift, and go to state 34
    STRING  shift, and go to state 35
    INT     shift, and go to state 36

    $default  reduce using rule 51 (args)

    exp     go to state 70
    lvalue  go to state 38
    args    go to state 100


State 92

   53 args: exp COMMA • args

    ID      shift, and go to state 34
    STRING  shift, and go to state 35
    INT     shift, and go to state 36

    $default  reduce using rule 51 (args)

    exp     go to state 70
    lvalue  go to state 38
    args    go to state 101


State 93

   43 exp: ID LPAREN args RPAREN •

    $default  reduce using rule 43 (exp)


State 94

   13 vardec: lvalue ASSIGN NEW ID LPAREN args • RPAREN SEMICOLON

    RPAREN  shift, and go to state 102


State 95

   12 vardec: ID ID ASSIGN NEW ID LPAREN args • RPAREN SEMICOLON

    RPAREN  shift, and go to state 103


State 96

   56 tyargs: ty ID COMMA • tyargs

    INTTY     shift, and go to state 10
    STRINGTY  shift, and go to state 11

    $default  reduce using rule 54 (tyargs)

    ty      go to state 64
    tyargs  go to state 104


State 97

   16 func: FUN ID LPAREN tyargs RPAREN LBRACE • stmts RBRACE

    ID        shift, and go to state 105
    LBRACE    shift, and go to state 106
    IF        shift, and go to state 107
    WHILE     shift, and go to state 108
    FOR       shift, and go to state 109
    INTTY     shift, and go to state 10
    STRINGTY  shift, and go to state 11
    FUN       shift, and go to state 17

    $default  reduce using rule 18 (stmts)

    vardec  go to state 110
    func    go to state 111
    stmts   go to state 112
    stmt    go to state 113
    ty      go to state 14
    lvalue  go to state 15


State 98

   17 func: FUN ID RETURNS ty LPAREN tyargs • RPAREN LBRACE stmts retstmt RBRACE

    RPAREN  shift, and go to state 114


State 99

   10 vardec: ty LBRACK INT RBRACK ID ASSIGN exp • SEMICOLON
   31 exp: exp • PLUS exp
   32    | exp • MINUS exp
   33    | exp • TIMES exp
   34    | exp • DIVIDE exp
   35    | exp • EQ exp
   36    | exp • NEQ exp
   37    | exp • LT exp
   38    | exp • GT exp
   39    | exp • LE exp
   40    | exp • GE exp
   41    | exp • AND exp
   42    | exp • OR exp

    SEMICOLON  shift, and go to state 115
    PLUS       shift, and go to state 49
    MINUS      shift, and go to state 50
    TIMES      shift, and go to state 51
    DIVIDE     shift, and go to state 52
    EQ         shift, and go to state 53
    NEQ        shift, and go to state 54
    LT         shift, and go to state 55
    LE         shift, and go to state 56
    GT         shift, and go to state 57
    GE         shift, and go to state 58
    AND        shift, and go to state 59
    OR         shift, and go to state 60


State 100

   45 exp: ID DOT ID LPAREN args • RPAREN

    RPAREN  shift, and go to state 116


State 101

   53 args: exp COMMA args •

    $default  reduce using rule 53 (args)


State 102

   13 vardec: lvalue ASSIGN NEW ID LPAREN args RPAREN • SEMICOLON

    SEMICOLON  shift, and go to state 117


State 103

   12 vardec: ID ID ASSIGN NEW ID LPAREN args RPAREN • SEMICOLON

    SEMICOLON  shift, and go to state 118


State 104

   56 tyargs: ty ID COMMA tyargs •

    $default  reduce using rule 56 (tyargs)


State 105

   11 vardec: ID • ID SEMICOLON
   12       | ID • ID ASSIGN NEW ID LPAREN args RPAREN SEMICOLON
   26 stmt: ID • LPAREN args RPAREN SEMICOLON
   49 lvalue: ID •

    ID      shift, and go to state 16
    LPAREN  shift, and go to state 119

    $default  reduce using rule 49 (lvalue)


State 106

   24 stmt: LBRACE • stmts RBRACE

    ID        shift, and go to state 105
    LBRACE    shift, and go to state 106
    IF        shift, and go to state 107
    WHILE     shift, and go to state 108
    FOR       shift, and go to state 109
    INTTY     shift, and go to state 10
    STRINGTY  shift, and go to state 11
    FUN       shift, and go to state 17

    $default  reduce using rule 18 (stmts)

    vardec  go to state 110
    func    go to state 111
    stmts   go to state 120
    stmt    go to state 113
    ty      go to state 14
    lvalue  go to state 15


State 107

   21 stmt: IF • LPAREN exp RPAREN stmt ELSE stmt

    LPAREN  shift, and go to state 121


State 108

   22 stmt: WHILE • LPAREN exp RPAREN stmt

    LPAREN  shift, and go to state 122


State 109

   23 stmt: FOR • LPAREN ID ASSIGN exp SEMICOLON exp SEMICOLON stmt RPAREN stmt

    LPAREN  shift, and go to state 123


State 110

   20 stmt: vardec •

    $default  reduce using rule 20 (stmt)


State 111

   25 stmt: func •

    $default  reduce using rule 25 (stmt)


State 112

   16 func: FUN ID LPAREN tyargs RPAREN LBRACE stmts • RBRACE

    RBRACE  shift, and go to state 124


State 113

   19 stmts: stmt • stmts

    ID        shift, and go to state 105
    LBRACE    shift, and go to state 106
    IF        shift, and go to state 107
    WHILE     shift, and go to state 108
    FOR       shift, and go to state 109
    INTTY     shift, and go to state 10
    STRINGTY  shift, and go to state 11
    FUN       shift, and go to state 17

    $default  reduce using rule 18 (stmts)

    vardec  go to state 110
    func    go to state 111
    stmts   go to state 125
    stmt    go to state 113
    ty      go to state 14
    lvalue  go to state 15


State 114

   17 func: FUN ID RETURNS ty LPAREN tyargs RPAREN • LBRACE stmts retstmt RBRACE

    LBRACE  shift, and go to state 126


State 115

   10 vardec: ty LBRACK INT RBRACK ID ASSIGN exp SEMICOLON •

    $default  reduce using rule 10 (vardec)


State 116

   45 exp: ID DOT ID LPAREN args RPAREN •

    $default  reduce using rule 45 (exp)


State 117

   13 vardec: lvalue ASSIGN NEW ID LPAREN args RPAREN SEMICOLON •

    $default  reduce using rule 13 (vardec)


State 118

   12 vardec: ID ID ASSIGN NEW ID LPAREN args RPAREN SEMICOLON •

    $default  reduce using rule 12 (vardec)


State 119

   26 stmt: ID LPAREN • args RPAREN SEMICOLON

    ID      shift, and go to state 34
    STRING  shift, and go to state 35
    INT     shift, and go to state 36

    $default  reduce using rule 51 (args)

    exp     go to state 70
    lvalue  go to state 38
    args    go to state 127


State 120

   24 stmt: LBRACE stmts • RBRACE

    RBRACE  shift, and go to state 128


State 121

   21 stmt: IF LPAREN • exp RPAREN stmt ELSE stmt

    ID      shift, and go to state 34
    STRING  shift, and go to state 35
    INT     shift, and go to state 36

    exp     go to state 129
    lvalue  go to state 38


State 122

   22 stmt: WHILE LPAREN • exp RPAREN stmt

    ID      shift, and go to state 34
    STRING  shift, and go to state 35
    INT     shift, and go to state 36

    exp     go to state 130
    lvalue  go to state 38


State 123

   23 stmt: FOR LPAREN • ID ASSIGN exp SEMICOLON exp SEMICOLON stmt RPAREN stmt

    ID  shift, and go to state 131


State 124

   16 func: FUN ID LPAREN tyargs RPAREN LBRACE stmts RBRACE •

    $default  reduce using rule 16 (func)


State 125

   19 stmts: stmt stmts •

    $default  reduce using rule 19 (stmts)


State 126

   17 func: FUN ID RETURNS ty LPAREN tyargs RPAREN LBRACE • stmts retstmt RBRACE

    ID        shift, and go to state 105
    LBRACE    shift, and go to state 106
    IF        shift, and go to state 107
    WHILE     shift, and go to state 108
    FOR       shift, and go to state 109
    INTTY     shift, and go to state 10
    STRINGTY  shift, and go to state 11
    FUN       shift, and go to state 17

    $default  reduce using rule 18 (stmts)

    vardec  go to state 110
    func    go to state 111
    stmts   go to state 132
    stmt    go to state 113
    ty      go to state 14
    lvalue  go to state 15


State 127

   26 stmt: ID LPAREN args • RPAREN SEMICOLON

    RPAREN  shift, and go to state 133


State 128

   24 stmt: LBRACE stmts RBRACE •

    $default  reduce using rule 24 (stmt)


State 129

   21 stmt: IF LPAREN exp • RPAREN stmt ELSE stmt
   31 exp: exp • PLUS exp
   32    | exp • MINUS exp
   33    | exp • TIMES exp
   34    | exp • DIVIDE exp
   35    | exp • EQ exp
   36    | exp • NEQ exp
   37    | exp • LT exp
   38    | exp • GT exp
   39    | exp • LE exp
   40    | exp • GE exp
   41    | exp • AND exp
   42    | exp • OR exp

    RPAREN  shift, and go to state 134
    PLUS    shift, and go to state 49
    MINUS   shift, and go to state 50
    TIMES   shift, and go to state 51
    DIVIDE  shift, and go to state 52
    EQ      shift, and go to state 53
    NEQ     shift, and go to state 54
    LT      shift, and go to state 55
    LE      shift, and go to state 56
    GT      shift, and go to state 57
    GE      shift, and go to state 58
    AND     shift, and go to state 59
    OR      shift, and go to state 60


State 130

   22 stmt: WHILE LPAREN exp • RPAREN stmt
   31 exp: exp • PLUS exp
   32    | exp • MINUS exp
   33    | exp • TIMES exp
   34    | exp • DIVIDE exp
   35    | exp • EQ exp
   36    | exp • NEQ exp
   37    | exp • LT exp
   38    | exp • GT exp
   39    | exp • LE exp
   40    | exp • GE exp
   41    | exp • AND exp
   42    | exp • OR exp

    RPAREN  shift, and go to state 135
    PLUS    shift, and go to state 49
    MINUS   shift, and go to state 50
    TIMES   shift, and go to state 51
    DIVIDE  shift, and go to state 52
    EQ      shift, and go to state 53
    NEQ     shift, and go to state 54
    LT      shift, and go to state 55
    LE      shift, and go to state 56
    GT      shift, and go to state 57
    GE      shift, and go to state 58
    AND     shift, and go to state 59
    OR      shift, and go to state 60


State 131

   23 stmt: FOR LPAREN ID • ASSIGN exp SEMICOLON exp SEMICOLON stmt RPAREN stmt

    ASSIGN  shift, and go to state 136


State 132

   17 func: FUN ID RETURNS ty LPAREN tyargs RPAREN LBRACE stmts • retstmt RBRACE

    RETURN  shift, and go to state 137

    retstmt  go to state 138


State 133

   26 stmt: ID LPAREN args RPAREN • SEMICOLON

    SEMICOLON  shift, and go to state 139


State 134

   21 stmt: IF LPAREN exp RPAREN • stmt ELSE stmt

    ID        shift, and go to state 105
    LBRACE    shift, and go to state 106
    IF        shift, and go to state 107
    WHILE     shift, and go to state 108
    FOR       shift, and go to state 109
    INTTY     shift, and go to state 10
    STRINGTY  shift, and go to state 11
    FUN       shift, and go to state 17

    vardec  go to state 110
    func    go to state 111
    stmt    go to state 140
    ty      go to state 14
    lvalue  go to state 15


State 135

   22 stmt: WHILE LPAREN exp RPAREN • stmt

    ID        shift, and go to state 105
    LBRACE    shift, and go to state 106
    IF        shift, and go to state 107
    WHILE     shift, and go to state 108
    FOR       shift, and go to state 109
    INTTY     shift, and go to state 10
    STRINGTY  shift, and go to state 11
    FUN       shift, and go to state 17

    vardec  go to state 110
    func    go to state 111
    stmt    go to state 141
    ty      go to state 14
    lvalue  go to state 15


State 136

   23 stmt: FOR LPAREN ID ASSIGN • exp SEMICOLON exp SEMICOLON stmt RPAREN stmt

    ID      shift, and go to state 34
    STRING  shift, and go to state 35
    INT     shift, and go to state 36

    exp     go to state 142
    lvalue  go to state 38


State 137

   27 retstmt: RETURN • exp SEMICOLON

    ID      shift, and go to state 34
    STRING  shift, and go to state 35
    INT     shift, and go to state 36

    exp     go to state 143
    lvalue  go to state 38


State 138

   17 func: FUN ID RETURNS ty LPAREN tyargs RPAREN LBRACE stmts retstmt • RBRACE

    RBRACE  shift, and go to state 144


State 139

   26 stmt: ID LPAREN args RPAREN SEMICOLON •

    $default  reduce using rule 26 (stmt)


State 140

   21 stmt: IF LPAREN exp RPAREN stmt • ELSE stmt

    ELSE  shift, and go to state 145


State 141

   22 stmt: WHILE LPAREN exp RPAREN stmt •

    $default  reduce using rule 22 (stmt)


State 142

   23 stmt: FOR LPAREN ID ASSIGN exp • SEMICOLON exp SEMICOLON stmt RPAREN stmt
   31 exp: exp • PLUS exp
   32    | exp • MINUS exp
   33    | exp • TIMES exp
   34    | exp • DIVIDE exp
   35    | exp • EQ exp
   36    | exp • NEQ exp
   37    | exp • LT exp
   38    | exp • GT exp
   39    | exp • LE exp
   40    | exp • GE exp
   41    | exp • AND exp
   42    | exp • OR exp

    SEMICOLON  shift, and go to state 146
    PLUS       shift, and go to state 49
    MINUS      shift, and go to state 50
    TIMES      shift, and go to state 51
    DIVIDE     shift, and go to state 52
    EQ         shift, and go to state 53
    NEQ        shift, and go to state 54
    LT         shift, and go to state 55
    LE         shift, and go to state 56
    GT         shift, and go to state 57
    GE         shift, and go to state 58
    AND        shift, and go to state 59
    OR         shift, and go to state 60


State 143

   27 retstmt: RETURN exp • SEMICOLON
   31 exp: exp • PLUS exp
   32    | exp • MINUS exp
   33    | exp • TIMES exp
   34    | exp • DIVIDE exp
   35    | exp • EQ exp
   36    | exp • NEQ exp
   37    | exp • LT exp
   38    | exp • GT exp
   39    | exp • LE exp
   40    | exp • GE exp
   41    | exp • AND exp
   42    | exp • OR exp

    SEMICOLON  shift, and go to state 147
    PLUS       shift, and go to state 49
    MINUS      shift, and go to state 50
    TIMES      shift, and go to state 51
    DIVIDE     shift, and go to state 52
    EQ         shift, and go to state 53
    NEQ        shift, and go to state 54
    LT         shift, and go to state 55
    LE         shift, and go to state 56
    GT         shift, and go to state 57
    GE         shift, and go to state 58
    AND        shift, and go to state 59
    OR         shift, and go to state 60


State 144

   17 func: FUN ID RETURNS ty LPAREN tyargs RPAREN LBRACE stmts retstmt RBRACE •

    $default  reduce using rule 17 (func)


State 145

   21 stmt: IF LPAREN exp RPAREN stmt ELSE • stmt

    ID        shift, and go to state 105
    LBRACE    shift, and go to state 106
    IF        shift, and go to state 107
    WHILE     shift, and go to state 108
    FOR       shift, and go to state 109
    INTTY     shift, and go to state 10
    STRINGTY  shift, and go to state 11
    FUN       shift, and go to state 17

    vardec  go to state 110
    func    go to state 111
    stmt    go to state 148
    ty      go to state 14
    lvalue  go to state 15


State 146

   23 stmt: FOR LPAREN ID ASSIGN exp SEMICOLON • exp SEMICOLON stmt RPAREN stmt

    ID      shift, and go to state 34
    STRING  shift, and go to state 35
    INT     shift, and go to state 36

    exp     go to state 149
    lvalue  go to state 38


State 147

   27 retstmt: RETURN exp SEMICOLON •

    $default  reduce using rule 27 (retstmt)


State 148

   21 stmt: IF LPAREN exp RPAREN stmt ELSE stmt •

    $default  reduce using rule 21 (stmt)


State 149

   23 stmt: FOR LPAREN ID ASSIGN exp SEMICOLON exp • SEMICOLON stmt RPAREN stmt
   31 exp: exp • PLUS exp
   32    | exp • MINUS exp
   33    | exp • TIMES exp
   34    | exp • DIVIDE exp
   35    | exp • EQ exp
   36    | exp • NEQ exp
   37    | exp • LT exp
   38    | exp • GT exp
   39    | exp • LE exp
   40    | exp • GE exp
   41    | exp • AND exp
   42    | exp • OR exp

    SEMICOLON  shift, and go to state 150
    PLUS       shift, and go to state 49
    MINUS      shift, and go to state 50
    TIMES      shift, and go to state 51
    DIVIDE     shift, and go to state 52
    EQ         shift, and go to state 53
    NEQ        shift, and go to state 54
    LT         shift, and go to state 55
    LE         shift, and go to state 56
    GT         shift, and go to state 57
    GE         shift, and go to state 58
    AND        shift, and go to state 59
    OR         shift, and go to state 60


State 150

   23 stmt: FOR LPAREN ID ASSIGN exp SEMICOLON exp SEMICOLON • stmt RPAREN stmt

    ID        shift, and go to state 105
    LBRACE    shift, and go to state 106
    IF        shift, and go to state 107
    WHILE     shift, and go to state 108
    FOR       shift, and go to state 109
    INTTY     shift, and go to state 10
    STRINGTY  shift, and go to state 11
    FUN       shift, and go to state 17

    vardec  go to state 110
    func    go to state 111
    stmt    go to state 151
    ty      go to state 14
    lvalue  go to state 15


State 151

   23 stmt: FOR LPAREN ID ASSIGN exp SEMICOLON exp SEMICOLON stmt • RPAREN stmt

    RPAREN  shift, and go to state 152


State 152

   23 stmt: FOR LPAREN ID ASSIGN exp SEMICOLON exp SEMICOLON stmt RPAREN • stmt

    ID        shift, and go to state 105
    LBRACE    shift, and go to state 106
    IF        shift, and go to state 107
    WHILE     shift, and go to state 108
    FOR       shift, and go to state 109
    INTTY     shift, and go to state 10
    STRINGTY  shift, and go to state 11
    FUN       shift, and go to state 17

    vardec  go to state 110
    func    go to state 111
    stmt    go to state 153
    ty      go to state 14
    lvalue  go to state 15


State 153

   23 stmt: FOR LPAREN ID ASSIGN exp SEMICOLON exp SEMICOLON stmt RPAREN stmt •

    $default  reduce using rule 23 (stmt)
